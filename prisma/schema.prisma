// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Bhai, Prisma schema file mein hum directly nanoid ya koi JS/TS import nahi kar sakte. 
// Agar tumhe default value ke liye unique id chahiye, toh Prisma ke @default(uuid()) ya @default(cuid()) use kar sakte ho.
// Agar tumhe nanoid ka use karna hai, toh woh tumhe apne application code (jaise ki JS/TS files) mein karna padega, Prisma schema mein nahi.

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  agents        Agent[]
  meetings       Meeting[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Agent {
  id           String   @id @default(uuid()) // or use @default(uuid())
  name         String
  userId       String
  instructions String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  meetings Meeting[] 
}

model Meeting {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  userId          String   @map("user_id")
  agentId         String   @map("agent_id")
  transcriptionUrl String?
  recordingUrl     String?
  summary          String?
  status           MeetingStatus @default(UPCOMING)
  startedAt        DateTime @default(now())
  endedAt          DateTime?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent  Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
}


enum MeetingStatus {
  UPCOMING
  COMPLETED
  CANCELLED
}


// model Meeting {
//   id       String   @id @default(cuid())
//   topic    String
//   agentId  String
//   agent    Agent    @relation(fields: [agentId], references: [id])
// }
